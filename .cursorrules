# Project Rules and Guidelines

## Technology Stack
- TypeScript
- Node.js
- Next.js App Router
- React
- Shadcn UI
- Tailwind CSS
- Framer Motion

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

## Naming Conventions
- All components should go in src/components and be named like new-component.tsx
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

## Syntax and Formatting
- Use the "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX

## UI and Styling
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach

## Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC)
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: use WebP format, include size data, implement lazy loading

## Key Conventions
- Use 'nuqs' for URL search parameter state management
- Optimize Web Vitals (LCP, CLS, FID)
- Limit 'use client':
  - Favor server components and Next.js SSR
  - Use only for Web API access in small components
  - Avoid for data fetching or state management
- Follow Next.js docs for Data Fetching, Rendering, and Routing
- Use https://placekitten.com/ for placeholder images in seed data

## Project Structure
```
/src
  /app
    /_components      # Private components for specific pages
    /api             # API routes
    /(routes)        # App router pages
    /auth           # Authentication flows
    /dashboard      # Main creator dashboard
    /campaigns      # Campaign discovery & management
    /profile       # Profile management
    /payments      # Payment settings
    /settings      # App settings
  /components
    /ui              # Reusable UI components
      /Button
      /Modal
      /Card
    /forms           # Form-related components
      /TextField
      /Select
    /layout          # Layout components
      /Navbar
      /Footer
    /features        # Feature-specific components
  /lib              # Utility functions and shared logic
  /types            # TypeScript type definitions
  /styles           # Global styles and Tailwind config
```

## Component Organization Guidelines
1. Private Components:
   - Place in _components folder within relevant /app subdirectory
   - Used only within specific pages

2. Shared Components:
   - Place in /src/components folder
   - Reusable across multiple pages or features

3. Modular Approach:
   - Group components by type or feature
   - Each feature/domain can have its own folder containing:
     - Components
     - Hooks
     - Utilities specific to that feature 

4. General Rules:

- After making changes, ALWAYS make sure to start up a new server so I can test it.
- Always look for existing code to iterate on instead of creating new code.
- Do not drastically change the patterns before trying to iterate on existing patterns.
- Always kill all existing related servers that may have been created in previous testing before trying to start a new server.
- Always prefer simple solutions
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality
- Write code that takes into account the different environments: dev, test, and prod
- You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested
- When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old implementation afterwards so we don't have duplicate logic.
- Keep the codebase very clean and organized
- Avoid writing scripts in files if possible, especially if the script is likely only to be run once
- Avoid having files over 200-300 lines of code. Refactor at that point.
- Mocking data is only needed for tests, never mock data for dev or prod
- Never add stubbing or fake data patterns to code that affects the dev or prod environments
- Never overwrite my .env file without first asking and confirming
- Focus on the areas of code relevant to the task
- Do not touch code that is unrelated to the task
- Write thorough tests for all major functionality
- Avoid making major changes to the patterns and architecture of how a feature works, after it has shown to work well, unless explicitly instructed
- Always think about what other methods and areas of code might be affected by code changes