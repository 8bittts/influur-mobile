# Project Rules and Guidelines

## Technology Stack
- TypeScript
- Node.js
- Next.js App Router
- React
- Shadcn UI
- Tailwind CSS
- Framer Motion

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

## Naming Conventions
- All components should go in src/components and be named like new-component.tsx
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Favor named exports for components

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use maps instead
- Use functional components with TypeScript interfaces

## Syntax and Formatting
- Use the "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements
- Use declarative JSX

## UI and Styling
- Use Shadcn UI and Tailwind for components and styling
- Implement responsive design with Tailwind CSS; use a mobile-first approach

## Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC)
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: use WebP format, include size data, implement lazy loading

## Key Conventions
- Use 'nuqs' for URL search parameter state management
- Optimize Web Vitals (LCP, CLS, FID)
- Limit 'use client':
  - Favor server components and Next.js SSR
  - Use only for Web API access in small components
  - Avoid for data fetching or state management
- Follow Next.js docs for Data Fetching, Rendering, and Routing
- Use https://placekitten.com/ for placeholder images in seed data

## Project Structure
```
/src
  /app
    /_components      # Private components for specific pages
    /api             # API routes
    /(routes)        # App router pages
    /auth           # Authentication flows
    /dashboard      # Main creator dashboard
    /campaigns      # Campaign discovery & management
    /profile       # Profile management
    /payments      # Payment settings
    /settings      # App settings
  /components
    /ui              # Reusable UI components
      /Button
      /Modal
      /Card
    /forms           # Form-related components
      /TextField
      /Select
    /layout          # Layout components
      /Navbar
      /Footer
    /features        # Feature-specific components
  /lib              # Utility functions and shared logic
  /types            # TypeScript type definitions
  /styles           # Global styles and Tailwind config
```

## Component Organization Guidelines
1. Private Components:
   - Place in _components folder within relevant /app subdirectory
   - Used only within specific pages

2. Shared Components:
   - Place in /src/components folder
   - Reusable across multiple pages or features

3. Modular Approach:
   - Group components by type or feature
   - Each feature/domain can have its own folder containing:
     - Components
     - Hooks
     - Utilities specific to that feature 